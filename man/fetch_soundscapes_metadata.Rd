% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_soundscape_metadata.R
\name{fetch_soundscape_metadata}
\alias{fetch_soundscape_metadata}
\title{Extract Soundscape Metadata}
\usage{
fetch_soundscape_metadata(
  soundscapes_path = NULL,
  recursive = TRUE,
  output_file = NULL,
  skip_processed = TRUE,
  ncores = 1
)
}
\arguments{
\item{soundscapes_path}{A character string specifying the directory path
where all WAV files are located. If no path is provided, the function will
look for the soundscapes in the "soundscapes/" directory, or create it if
it does not exist.}

\item{recursive}{A logical value indicating whether the search for WAV files
should be recursive or not. Defaults to TRUE.}

\item{output_file}{A character string specifying the path to the output file.
Defaults to NULL. If there is a CSV table with metadata, a check of missing
recordings will be performed. If there are missing recordings, a log file
with a timestamp will be created with the names of the missing recordings.
We recommend importing the metadata from the CSV file directly to the R
session when no changes are expected in the metadata.}

\item{skip_processed}{A logical value indicating whether to check the
recordings present in the provided CSV file were already processed, and
avoid processing them again. Defaults to TRUE.}

\item{ncores}{An integer indicating the number of cores to be used for
parallelization. Defaults to 1.}
}
\value{
A data frame in the R session with the soundscapes metadata. If an
  output path is provided, the function will save the metadata in a CSV file
  in the provided path.
}
\description{
`r lifecycle::badge("experimental")`

  Extracts metadata from all WAV files found in a directory and its
  subdirectories.
}
\examples{
\dontrun{

# Load the necessary packages to run this example
library(monitoraSom)
library(dplyr)

# Load the soundscape list to populate the example data
data(ls_soundscapes)

# Create a directory and export the soundscapes
soundscapes_path <- "./soundscapes"
dir.create(soundscapes_path)
invisible(lapply(1:length(ls_soundscapes), function(i) {
  tuneR::writeWave(
    ls_soundscapes[[i]], file.path(soundscapes_path, names(ls_soundscapes)[i])
  )
}))

# Import the soundscapes metadata
df_soundscapes <- fetch_soundscape_metadata(
  soundscapes_path = soundscapes_path
)
glimpse(df_soundscapes)

}
}
