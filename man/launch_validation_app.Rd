% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/launch_validation_app.R
\name{launch_validation_app}
\alias{launch_validation_app}
\title{Launch validation app}
\usage{
launch_validation_app(
  project_path = ".",
  preset_path = NULL,
  validation_user,
  templates_path = NULL,
  soundscapes_path = NULL,
  input_path = NULL,
  output_path = NULL,
  detec_spec_path = NULL,
  detec_cuts_path = NULL,
  wav_player_path = "play",
  wav_player_type = "HTML player",
  val_subset = c("NV", "TP", "FP", "UN"),
  time_pads = 1,
  ovlp = 0,
  wl = 2048,
  dyn_range_bar = c(-144, 0),
  dyn_range_templ = c(-84, 0),
  dyn_range_detec = c(-84, 0),
  color_scale = "inferno",
  zoom_freq = c(0, 23),
  time_guide_interval = 1,
  freq_guide_interval = 1,
  subset_seed = 123,
  auto_next = TRUE,
  nav_autosave = TRUE,
  overwrite = FALSE,
  pitch_shift = 1,
  visible_bp = FALSE,
  play_norm = FALSE,
  skip_path_confirmation = TRUE
)
}
\arguments{
\item{project_path}{Path to the project folder. Defaults to ".".}

\item{preset_path}{Path from which presets can be imported and to which new
presets can be exported.}

\item{validation_user}{User name.}

\item{templates_path}{Path to the template wave files. Defaults to
"roi_cuts/". This directory must contain at least one `.wav` file for the
app to work.}

\item{soundscapes_path}{Path to the soundscape wave files. Defaults to
"soundscapes/". This directory must contain at least one `.wav` file for
the app to work.}

\item{input_path}{Path to the input file containing detections.}

\item{output_path}{Path to the output file. Defaults to NULL.}

\item{detec_spec_path}{Path to the folder containing the spectrogram images.
Defaults to "detection_spectrograms/".}

\item{detec_cuts_path}{Path to the folder containing the cut wave files.
Defaults to "detection_cuts/".}

\item{wav_player_path}{Path to the wav player executable (only for system
player). Defaults to "play".}

\item{wav_player_type}{The type of wav player. "R session" for R
session-based player, "system" for system player. Defaults to "HTML
player".}

\item{val_subset}{Subset of detections to be validated.}

\item{time_pads}{Time pads to be added to the start and end of the cut wave
files.}

\item{ovlp}{Overlap between consecutive cuts.}

\item{wl}{Window length for the spectrogram.}

\item{dyn_range_bar}{Adjustment of the maximum range of the dynamic range
slider.}

\item{dyn_range_templ}{Dynamic range for the template spectrogram.}

\item{dyn_range_detec}{Dynamic range for the detection spectrogram.}

\item{color_scale}{Color scale for the spectrogram.}

\item{zoom_freq}{Frequency range to zoom in the spectrogram.}

\item{time_guide_interval}{A numeric value indicating the interval in seconds
between time guides in the spectrogram.}

\item{freq_guide_interval}{A numeric value indicating the interval in kHz
between frequency guides in the spectrogram.}

\item{subset_seed}{Seed for the random shuffling.}

\item{auto_next}{If TRUE, the next file is automatically displayed when the
user validates a cut.}

\item{nav_autosave}{If TRUE, the current validation is saved when the user
navigates to another file.}

\item{overwrite}{If TRUE, the output file is overwritten.}

\item{pitch_shift}{Pitch shift for the audio cuts.}

\item{visible_bp}{If TRUE, the bandpass filter is visible in the spectrogram.}

\item{play_norm}{If TRUE, the played audio is normalized.}

\item{skip_path_confirmation}{If TRUE, it will not be necessary to confirm
the paths setup at the app startup.}
}
\value{
todo
}
\description{
`r lifecycle::badge("experimental")`

  This function launches the validation app, which is a Shiny app to validate
  for segemntation of WAV recorcings of soundscapes into tables containing
  regions of interest (ROIs) and audio cuts of the ROIs.
}
\examples{
\dontrun{

# Load the necessary packages to run this example
library(monitoraSom)

# Load and save the soundscape recordings to be rendered in the validation app.
data(ls_soundscapes)
dir.create("./soundscapes")
invisible(lapply(1:length(ls_soundscapes), function(i) {
  tuneR::writeWave(
    ls_soundscapes[[i]],
    file.path("./soundscapes", names(ls_soundscapes)[i])
  )
}))

# Load and save the template recordings to be rendered in the validation app.
data(ls_templates)
dir.create("./templates")
invisible(lapply(1:length(ls_templates), function(i) {
  tuneR::writeWave(
    ls_templates[[i]],
    file.path("./templates", names(ls_templates)[i])
  )
}))

# Load and save the detection data. We recommend to save an external copy of the
# detection data to store validations to avoid overwriting it.
data(df_detecs)
write.csv(
  df_detecs,
  file.path("./validation_outputs", "df_detecs_validation_app_test.csv"),
  row.names = FALSE
)

# Launch the validation app. We recommendo to use the same file for input and
# output to avoid overwriting the original detection data and to store the
# validation results across multiple sessions of the validation app.
launch_validation_app(
  project_path = ".", validation_user = "User",
  templates_path = "./templates/", soundscapes_path = "./soundscapes/",
  input_path = "./validation_outputs/df_detecs_validation_app_test.csv",
  output_path = "./validation_outputs/df_detecs_validation_app_test.csv",
  dyn_range_templ = c(-48, 0), dyn_range_detec = c(-90, -48), wl = 512,
  ovlp = 50, time_guide_interval = 0, freq_guide_interval = 0
)

}
}
