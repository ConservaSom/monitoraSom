% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fast_spectrogram.R
\name{fast_spectro}
\alias{fast_spectro}
\title{ggplot2 bypass to accelerate rendering of large spectrograms}
\usage{
fast_spectro(
  rec,
  f,
  flim = c(0, 10),
  ovlp = 50,
  wl = 1024,
  dyn_range = c(-60, 0),
  color_scale = "inferno",
  n_colors = 124,
  interpolate = FALSE,
  ...
)
}
\arguments{
\item{rec}{An object of class "Wave" as defined in the tuneR package}

\item{f}{The sampling frequency of the recording, in Hz}

\item{flim}{A numeric vector of length 2 giving the minimum and maximum frequency limits to be displayed in the spectrogram, in kHz.}

\item{ovlp}{A numeric value specifying the percentage overlap of windows in the spectrogram calculation.}

\item{wl}{An integer specifying the length of the FFT window used to calculate the spectrogram.}

\item{dyn_range}{A numeric vector of length 2 giving the minimum and maximum values of relative amplitude to be displayed in the spectrogram.}

\item{color_scale}{A character string specifying the color scale to be used in the spectrogram. Possible values are "viridis", "magma", "inferno", "cividis", "greyscale 1", or "greyscale 2".}

\item{n_colors}{An integer specifying the number of colors to be used in the color scale.}

\item{interpolate}{A logical value indicating whether the raster should be interpolated or not.}

\item{...}{Additional arguments to be passed to the spectro() function.}
}
\value{
This function returns a spectrogram plot using ggplot2.
}
\description{
This function creates a spectrogram plot using ggplot2 nearly ten times faster by introducing the spectrogram layer with `annotation_raster()` instead of `geom_raster()` or `geom_tile()`
}
\examples{
rec <- readWave("path/to/wave/file")
fast_spectro(rec, rec@samp.rate, flim = c(0, 10))
}
