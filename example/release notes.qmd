---
title: "Template Matching Notes"
author: "GLMRosa"
format: pdf
---

# increment version number to 0.1.1.9009
- R/fast_spectro.R
  - BUG - Corrigido o bug que impedia que as linhas de guias de frequência fossem omitidas quando o intervalo entre elas era 0 e que impedia a exibição dos valores dos eixos quando as guidas de frequência e de tempo eram omitidas simultaneamente.
  - BUG - (solução parcial) - Adicionadas camada de checagem para evitar erros causados pelo deposito de rois da soundscapes anterior na soundscape atual devido à navegação ocorrer antes de salvar a tabela de ROIs. O problema foi resolvido somente no ponto de importação dos dados, mas ainda não consegui implementar uma forma de corrigir esse comportamento durante eventos do tipo diretamente na administração dos valores depositados na tabela de rois ativa.

# increment version number to 0.1.1.9008
- R/launch_segmentation_app.R
  - Adicionado um pop-up de confirmação para ação de marcar "No signals of interest" e evitar que o usuário seja surpreendido com a remoção de todas as ROIs.
  - Removidos os botões para navegação entre diretórios na aba de setup. Agora os caminhos devem ser informados diretamente nos argumentos `soundscapes_path`, `roi_tables_path` e `cuts_path` antes da execução do app pelo usuário
  - Limpeza geral de código em desuso e refatoração de vários trechos de código para melhorar a estabilidade do app.
  - Aumentada a resolução do slider de frequência para 0.1kHz
  - Uso de funções helpers internamente para evitar repetição de código e aumentar a escalabilidade do app.
  - Foi reformulada a forma com as medições do espectro são exibidas, agora em um box no canto inferior direito do spectrograma.
  - Modificação do atalho para play/pause do audio para a barra de espaço, que agora funciona tanto para "HTML player" quanto para "R session".
  - Adicionados controles para as guias de tempo e frequência (ver `fast_spectro.R`)

- R/export_roi_cuts_n.R
  - Adicionadas checagens para evitar erros de execução quando o diretório de saída não existe ou não é writable.
  - Adicionado o argumento `overwrite` para controlar se os arquivos já existentes devem ser sobrescritos.

- R/launch_validation_app.R
  - Adicionadas novas camadas de checagem para os inputs e mensagens de erro/aviso mais claras e informativas.
  - Descontinuada a função de exportar diagnósticos de validação diretamente do app de validação. Agora a obtenção desses diagnósticos, bem como da validação por sobreposição temporal, devem ser obtidos a partir da função `diagnostic_validations_i()`. Apesar disso os diagnósticos continuam sendo exibidos e atualizados em tempo real no app de validação, que serão idênticos aos diagnósticos obtidos por meio da função `diagnostic_validations_i()`.
  - Refatoração geral do código para melhorar a estabilidade e a escalabilidade do app.
  - Removidos os botões de navegação entre diretórios baseados no pacote `shinyFiles`, que apresentava uma série de problemas de compatibilidade com a plataforma Windows.
  - Adicionados controles para as guias de tempo e frequência (ver `fast_spectro.R`)
  - Agora as teclas 1 e 2 reproduzem a detecção e o template, respectivamente, independentemente do player ser "HTML" ou "R session".

- R/fast_spectro.R
  - Adicionado o argumento `freq_guide_interval` para controlar o intervalo entre as linhas de grade de frequência no spectrograma. Para ocultar as linhas de grade de frequência, o usuário deve definir `freq_guide_interval = 0`.
  - Adicionado o argumento `time_guide_interval` para controlar o intervalo entre as linhas de grade de tempo no spectrograma. Para ocultar as linhas de grade de tempo, o usuário deve definir `time_guide_interval = 0`.

- R/fetch_template_metadata.R
  - Descontinuação do métod "roi_table" para extração de metadados de templates. O método será reimplementado de forma mais consistente e robusta no futuro.
  - Adicionadas camadas de checagem para evitar erros de execução quando o diretório de templates não foi encontrado ou não pode ser acessado.

- R/fetch_rois_n.R
  - Adicionadas camadas de checagem para evitar erros de execução quando o diretório de ROIs não foi encontrado ou não pode ser acessado.
  - Removido o argumento 'filter', já que pode ser substituido pela função `dplyr::filter()` facilmente quando isso é necessário.

- R/fetch_match_grid.R
  - Camadas de checagem agora geram warnings ao invés de erros, para que o usuário possa optar por ignorar certas condições e continuar a execução.

- R/fetch_score_peaks_n.R
  - Adição de paralelização com o argumento `ncores`.
- R/match_i.R
  - A função `match_i()` foi reformulada internamente para melhorar a escalabilidade e a estabilidade. Novas camadas de checagem foram adicionadas para evitar erros de execução.

- R/match_n.R
  - Adicionada uma camada de checagem quando `autosave_action = "append"` e `output = "detections"` para evitar que as mesmas detecções sejam recalculadas e salvas repetidamente. Essa camada também permite que o usuário possa interromper a execução antes que todas as detecções sejam processadas e retomar de onde parou sem risco de perder dados.
  - Como consequencia dessa mudança, passa a ser possivel fazer o streaming de resultados de multiplas rodadas para um mesmo arquivo CSV, que será atualizado em tempo real a medida que as detecções são processadas.

- diagnostic_validations_i.R
  - Adicionada uma camada de checagem para impedir erros de execução quando houver detecções de mais de um template no data frame a ser validado.

- R/template_matching.R
  - Argumentos e processo atualizado para incluir novos recursos e alterações das demais funções que são usadas internamente.

- NOVA FUNÇÃO: diagnostic_validations_n.R
  - Função para obter os diagnosticos de validação de `diagnostic_validations_i()` para tabelas de detecções feitas a partir de mais de um template ou de multiplas classes. Os resultados obtidos estão oerganizados em uma lista para cada template ou classe, com elementos internos contendo as tabelas e plots de diagnósticos.

- Geral
  - As tabelas de detecções receberam uma atualização no nome das variáveis `detec_min_score`, `detec_min_quant` e `detec_top_n` para `detection_min_score`, `detection_min_quant` e `detection_top_n`, respectivamente. Isso não afeta os fluxo de analise já que nenhuma função usa essas variaveis. Mas isso demanda atenção para integrar dados produzidos antes e depois dessa atualização em analises futuras.



# Increment version number to 0.1.1.9006
- R/diagnostic_validations_i.R
  - Diversas melhorias de performance, funcionament interno e integração com o restate das funções.
- R/fetch_soundscape_metadata.R
  - Adaptação para paralelização em Windows
  - Melhor manuseio de erros e alertas de arquivos vazios
- R/launch_validation_app.R
  - Detecções não validadas agora não são mais tratadas comom NA, mas sim como NV de "Not Validated" ou "Não Validadas". Com isso foi resoovido o bug mais sério desse app, que travava uma parte das detecs de forma que não podiam ser visualizadas e validadas por ficarem de fora de todos os subsets possiveis.
  - Correção de um bug importante que ocorria quando a tabela de detecções tinha sido salva sem nenhum comentário, fazendo com quando fosse lida novamente, gerava um conflito entre o tipo dessa variavel na plinlha de destino e na outrput da validação da detecção ativa
  - Limpeza extensiva de trechos de codigo que não estão mais em uso
  - zoom_freq agora muda em incrementos de 0.1 e não de 0.5
  - Foi removida a adaptação de slider de scores para evitar uma série de bugs relacionados a isso. Agora o slider tem um range fixo de -1 a 1 com incrementos de 0.01
  - Ampliação do range de zoom_freq de 0-20kHz para 0-192kHz por default, mas isso ainda pode ser adaptado nos argumentos da função.
  - Grande simplificação do código da parte de diagnósticos por causa do reaproveitamento da função diagnostic_validations_i()

# Increment version number to 0.1.1.9005
-`match_i` -
  - A função `match_i()` recebeu a opção de retornar scores (`output = "scores"`) ou detecções (`output = "detections"`), permitindo que o usuário escolha o tipo de output que deseja obter.
- `match_n` - O processo interno dessa função foi completamente remodelado
  - Foram adicionadas opções para que o usuário possa escolher se quer "scores", que é o output puro da função `match_i()`, ou "detections", que é o output da função `fetch_score_peaks_n()`. A escolha de "detections" foi habilitada para diminuir o tamanho dos resultados e resolver os problemas de escalabilidade da função `match_n()` original.
  - Foi dada ao usuário a escolha entre manter o resultado dentro do ambiente do R ou salvar em forma de arquivo RDS para "scores" e CSV para "detections".
  - O salvamento em CSV habilitado para "detections" foi desenvolvido de forma que as detecções obtidas a cada iteração sejam salvas diretamente no arquivo CSV, evitando a necessidade de armazenar a totalidade dos resultados na memória. O usuário tem ainda a opção de controlar autosave_action = "append" ou autosave_action = "replace", que permite adicionar novas detecções ao arquivo CSV ou substituir o arquivo existente, respectivamente. Recomenda-se o uso de autosave_action = "append" para evitar a perda de dados, mas o usuário deve estar atento para evitar a retenção de eventuais detecções duplicadas entre diferentes rodadas.
  - Todos os argumentos da função `find_score_peaks_n()` foram passados para a função `match_n()`, permitindo que o usuário possa filtrar os resultados de acordo com os scores obtidos.
  - Foram adicionads mensagens de texto para que o usuário se oriente em relação ao tipo de output escolhido.
- Nova função `export_roi_cuts_n` feita para exportar cortes em formato WAV de todas as ROIs de uma tabela produzida pelo app de segmentação. A função recebe como argumentos a tabela de ROIs e o diretório de saída dos cortes. Assume-se que os caminhos para os arquivos de audio na tabela de ROIs sejam válidos localmente para que possam ser lidos.
- `launch_segmentation_app()`
  - Correções nos gráficos de diagnósticos e remoção da curva ROC.
  - Substituição interna do processo de exportar cortes pela função `export_roi_cuts_n()`.
