---
title: "Untitled"
format: html
---

The `monitoraSom` package is a collection of functions for the analysis and detection of acoustic events in soundscapes using template matching maethods. Its development was focused into producing a package that is easy to use and customize, and that can be used by students, researchers and consultants with little to no experience in programming.

The detection workflow with template matching includes three fundamental steps:
1) segmentation of the soundscape into regions of interest (ROIs)
2) template matching of the ROIs with a set of templates, and
3) validation of the detections.

Segmentation is the basis of the detection workflow so that users can define which signals will be used as templates as well as building the data for benchmarking the detection performance. However, segmentation is not a trivial task, and it is often the most time-consuming step of the workflow. More so, available software are not free, or were adapted from other applications and are not optimized for soundscape analysis. Although these softwares have well thought graphical user interfaces (GUIs) and excellent performance for rendering spectrograms, they require manual file menagement with lots of clicks and tipying that can be prone to errors and are not reproducible. To solve this problem, we designed a shiny app that allows users to segment soundscape recordings into ROIs. After a semaless session setup that is presetable, the user can focus into segmentation in a reactive interface while the file menagement is done automatically. Therefore, it allows saving the time of trained users, which is the most expensive resource in a project, but also make it easier to train new users and increase the reproducibility of the analysis.

- `launch_segmentation_app()` - This function launches the segmentation app, which is a Shiny app for
  segemntation of WAV recorcings of soundscapes into tables containing regions of interest (ROIs) and audio cuts of the ROIs. The app settings can be imported from presets or set manually.

Rois are the basic unit of analysis in the detection workflow. They are defined by a start and end time, the limits of a frequency band, a label with the species name, and other metadata. There are two use cases for gathering ROIs. The first is to extract template metadata of ROIs that were specifically made with this purpose:
- `fetch_template_metadata()` - This function extracts metadata from a directory of template waveform files (standalone templates) or ROI tables in csv format (roi tables). Both formats of templates are available as output of the segmentation app. The function returns a data frame with the metadata of the templates.

The second is to gather ROIs from a directory of ROI tables in csv format. The function returns a data frame with the metadata of the templates.:
- `fetch_rois_n()` - Gather ROI tables from a directory

The next step is to gather metadata from the soundscape recordings in which the search will be made. This is done with the function:
- `fetch_soundscape_metadata()` - Extracts metadata from all WAV files found in a directory and its
subdirectories.

After gathering the templates and soundscapes, as well as filtering them according to the user's needs, the next step would be to compute the grid search of all possible combinations of templates and soundscapes. This is done with the function:
- `fetch_match_grid()` - This function takes in two data frames: soundscape_data (the output of the
function 'fetch_soundscape_metadata()') and template_data (the output of the function 'fetch_template_metadata()'), checks their compatibilities, and returns a new data frame with a grid of all possible matching combinations between the two data sets.

<!-- TODO CONTINUAR AQUI... -->

- `match_i()` - This function takes uses the metadata contained in one row of the output of
the function 'fetch_match_grid()' to calculate the matching score of the template spectrogram and a portion of the soundscape spectrogram of same dimensions. The available matching algorithms are the Pearson correlation coefficient ("cor") or dynamic time warping ("dtw").
- `match_n()` - This function is wrapper of 'match_i()' to perform a batch computation of the matching vectors of the template and soundscape matches defined in the metadata grid obtained as output of the function 'fetch_match_grid()'. The available algorithms to compare spectrograms and compute matching scores are the Pearson correlation coefficient ("cor") or dynamic time warping ("dtw").
- `fetch_score_peaks_i()` -  This function detects peaks in the score vector resulting from one iteration
 of template matching, i.e. the output of 'match_i()' or one row of the  output of 'match_n()' . The peaks represent potential detections of a  template in a soundscape recording.
- `fetch_score_peaks_n()` - This function is wrapper of 'fetch_score_peaks_i' for detection of peaks in
  score vectors from matches between multiple templates and soundscapes, i.e. the output of 'match_n'. The also allows multiple methods for filtering suboptimal detections.

- `template_matching()` - This function performs template matching on a set of soundscapes using a
  set of templates, and returns a dataframe with the detected events.


- `validate_by_overlap_i()` - This function takes in two data frames, one containing Regions of Interest
(ROIs) and another containing detections. It then validates the detections by checking for overlaps with the ROIs. The function returns a data frame with the validated detections.

- `launch_validation_app()` - This function launches the validation app, which is a Shiny app to validate
  for segemntation of WAV recorcings of soundscapes into tables containing regions of interest (ROIs) and audio cuts of the ROIs. The app settings can be imported from presets or set manually.


- `fast_spectro()` - This function creates a spectrogram plot using ggplot2 nearly ten times faster by introducing the spectrogram layer with 'annotation_raster' instead of 'geom_raster' or 'geom_tile'.



- `plot_detecs_i()` - This function plots a spectrogram of the soundscape and the results of the
match_i() and fetch_score_peaks_i() functions.


  >= cut	< cut
ovlp	TP	FN
no ovlp	FP	TN